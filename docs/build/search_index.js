var documenterSearchIndex = {"docs":
[{"location":"#DiscreteEntropy","page":"Home","title":"DiscreteEntropy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for the estimation of Shannon entropy of discrete distributions.","category":"page"},{"location":"#Multiplicities","page":"Home","title":"Multiplicities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DiscreteEntropy uses the multiplicities representation of data. Given a histogram of samples","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AbstractEstimator\nestimate_h","category":"page"},{"location":"#DiscreteEntropy.AbstractEstimator","page":"Home","title":"DiscreteEntropy.AbstractEstimator","text":"AbstractEstimator\n\nSupertype for NonParameterised and Parameterised entropy estimators.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteEntropy.estimate_h","page":"Home","title":"DiscreteEntropy.estimate_h","text":"estimate_h(data::CountData, estimator::Type{T}) where {T<:AbstractEstimator}\n\nReturn the estimate in nats of Shannon entropy of data using estimator.\n\n\n\n\n\n","category":"function"},{"location":"#Data","page":"Home","title":"Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"from_data\nfrom_samples\nfrom_counts\n\nEntropyData\nCountData","category":"page"},{"location":"#DiscreteEntropy.from_data","page":"Home","title":"DiscreteEntropy.from_data","text":"from_data(data::AbstractVector, ::Type{Samples})\nfrom_data(data::AbstractVector, ::Type{SampleHistogram})\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.from_samples","page":"Home","title":"DiscreteEntropy.from_samples","text":"from_samples\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.CountData","page":"Home","title":"DiscreteEntropy.CountData","text":"CountData\n\n\n\n\n\n","category":"type"},{"location":"#Frequentist-Estimators","page":"Home","title":"Frequentist Estimators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"maximum_likelihood\njackknife_ml\nmiller_madow\ngrassberger\nschurmann\nschurmann_generalised\nzhang\nchao_shen\nchao_wang_jost\nbonachela\nshrink","category":"page"},{"location":"#DiscreteEntropy.maximum_likelihood","page":"Home","title":"DiscreteEntropy.maximum_likelihood","text":"maximum_likelihood(data::CountData)::Float64\n\nReturn the maximum likelihood estimation of Shannon entropy of data in nats.\n\nhatH_tinyML = - sum_i=1^K p_i log(p_i)\n\nor equivalently\n\nhatH_tinyML = log(N) - frac1N sum_i=1^Kh_i log(h_i)\n\nExamples\n\n\njulia> data = from_data([1,2,3,2,1], Histogram)\nCountData([2.0 3.0 1.0; 2.0 1.0 2.0], 9.0, 6)\n\njulia> maximum_likelihood(data)\n1.522955067\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.miller_madow","page":"Home","title":"DiscreteEntropy.miller_madow","text":"miller_madow(data::CountData)\n\nReturn the Miller Madow estimation of Shannon entropy, with a positive bias based on the total number of samples seen (N) and the support size (K).\n\nhatH_tinyMM = hatH_tinyML + fracK - 12N\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.grassberger","page":"Home","title":"DiscreteEntropy.grassberger","text":"grassberger(data::CountData)\n\nReturn the Grassberger estimation of Shannon entropy of data in nats.\n\nhatH_G = log(N) - frac1N sum_i=1^K h_i  G(h_i)\n\nThis is essentially the same as hatH_tinyML, but with the logarithm swapped for the scalar function G\n\nwhere\n\nG(h) = psi(h) + frac12(-1)^h left( psi(frach+12 - psi(frach2) ) right)\n\nThis is the solution to G(h) = psi(h) + (-1)^h int_0^1 fracx^h - 1x+1 dx as given in the paper\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.schurmann","page":"Home","title":"DiscreteEntropy.schurmann","text":"schurmann(data::CountData, ξ::Float64 = ℯ^(-1/2))\n\nReturn the Schurmann estimate of Shannon entropy of data in nats.\n\nhatH_SHU = psi(N) - frac1N sum_i=1^K  h_i left( psi(h_i) + (-1)^h_i _0^frac1xi - 1 fract^h_i-11+tdt right)\n\n\nThis is no one ideal value for xi, however the paper suggests e^(-12) approx 06\n\nExternal Links\n\nschurmann\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.schurmann_generalised","page":"Home","title":"DiscreteEntropy.schurmann_generalised","text":"schurmann_generalised(data::CountVector, xis::XiVector{T}) where {T<:Real}\n\nschurmann_generalised\n\nhatH_tinySHU = psi(N) - frac1N sum_i=1^K  h_i left( psi(h_i) + (-1)^h_i _0^frac1xi_i - 1 fract^h_i-11+tdt right)\n\n\nReturn the generalised Schurmann entropy estimation, given a countvector data and a xivector xis, which must both be the same length.\n\nschurmann_generalised(data::CountVector, xis::Distribution, scalar=false)\n\nComputes the generalised Schurmann entropy estimation, given a countvector data and a distribution xis.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.zhang","page":"Home","title":"DiscreteEntropy.zhang","text":"zhang(data::CountData)\n\nReturn the Zhang estimate of the Shannon entropy of data in nats.\n\nThe recommended definition of Zhang's estimator is from Grabchak et al.\n\nhatH_Z = sum_i=1^K hatp_i sum_v=1^N - h_i frac1v _j=0^v-1 left( 1 + frac1 - h_iN - 1 - j right)\n\nThe actual algorithm comes from Fast Calculation of entropy with Zhang's estimator by Lozano et al..\n\nLinks\n\nEntropy estimation in turing's perspective\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.chao_shen","page":"Home","title":"DiscreteEntropy.chao_shen","text":"chao_shen(data::CountData)\n\nReturn the Chao-Shen estimate of the Shannon entropy of data in nats.\n\nhatH_CS = - sum_i=i^K frachatp_i^CS log hatp_i^CS1 - (1 - hatp_i^CS)\n\nwhere\n\nhatp_i^CS = (1 - frac1 - hatp_i^MLN) hatp_i^ML\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.chao_wang_jost","page":"Home","title":"DiscreteEntropy.chao_wang_jost","text":"chao_wang_jost(data::CountData)\n\nReturn the Chao Wang Jost Shannon entropy estimate of data in nats.\n\nhatH_tinyCWJ = sum_1 leq h_i leq N-1 frach_iN left(sum_k=h_i^N-1 frac1k right) +\nfracf_1N (1 - A)^-N + 1 left - log(A) - sum_r=1^N-1 frac1r (1 - A)^r right\n\nwith\n\nA = begincases\nfrac2 f_2(N-1) f_1 + 2 f_2   textif  f_2  0 \nfrac2(N-1)(f_1 - 1) + 1   textif  f_2 = 0  f_1 neq 0 \n1  textif  f_1 = f_2 = 0\nendcases\n\nwhere f_1 is the number of singletons and f_2 the number of doubletons in data.\n\nNotes\n\nThe algorithm is slightly modified port of that used in the entropart R library.\n\nExternal Links\n\nEntropy and the species accumulation curve: a novel entropy estimator via discovery rates of new species\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.bonachela","page":"Home","title":"DiscreteEntropy.bonachela","text":"bonachela(data::CountData)\n\nReturn the Bonachela estimator of the Shannon entropy of data in nats.\n\nhatH_B = frac1N+2 sum_i=1^K left( (h_i + 1) sum_j=n_i + 2^N+2 frac1j right)\n\nExternal Links\n\nEntropy estimates of small data sets\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.shrink","page":"Home","title":"DiscreteEntropy.shrink","text":"shrink(data::CountData)\n\nReturn the Shrinkage, or James-Stein estimator of Shannon entropy for data in nats.\n\nhatH_tinySHR = - sum_i=1^K hatp_x^tinySHR log(hatp_x^tinySHR)\n\nwhere\n\nhatp_x^tinySHR = lambda t_x + (1 - lambda) hatp_x^tinyML\n\nand\n\nlambda = frac 1 - sum_x=1^K (hatp_x^tinySHR)^2(n-1) sum_x=1^K (t_x - hatp_x^tinyML)^2\n\nwith\n\nt_x = 1  K\n\nNotes\n\nBased on the implementation in the R package entropy\n\nExternal Links\n\nEntropy Inference and the James-Stein Estimator\n\n\n\n\n\n","category":"function"},{"location":"#Bayesian-Estimators","page":"Home","title":"Bayesian Estimators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"bayes\nnsb\nansb\npym","category":"page"},{"location":"#DiscreteEntropy.bayes","page":"Home","title":"DiscreteEntropy.bayes","text":"bayes(data::CountData, α::AbstractFloat)\n\nReturns an estimate of Shannon entropy given data and a concentration parameter α.\n\nhatH_textBayes = - sum_k=1^K hatp_k^textBayes  log hatp_k^textBayes\n\nwhere\n\np_k^textBayes = frack + αn + A\n\nand\n\nA = sum_x=1^K α_x\n\nIn addition to setting your own α, we have the following suggested choices\n\njeffrey : α = 0.5\nlaplace: α = 1.0\nschurmann_grassberger: α = 1 / K\nminimax: α = √{n} / K\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.nsb","page":"Home","title":"DiscreteEntropy.nsb","text":"nsb(data, K=data.K)\n\nReturns the Bayesian estimate of Shannon entropy of data, using the Nemenman, Shafee, Bialek algorithm\n\nhatH^textNSB = frac int_0^ln(K) dxi  rho(xi textbfn) langle H^m rangle_beta (xi)  \n                             int_0^ln(K) dxi  rho(ximid n)\n\nwhere\n\nrho(xi mid textbfn) =\n    mathcalP(beta (xi)) frac Gamma(kappa(xi))Gamma(N + kappa(xi))\n    prod_i=1^K fracGamma(n_i + beta(xi))Gamma(beta(xi))\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.ansb","page":"Home","title":"DiscreteEntropy.ansb","text":"ansb(data::CountData; undersampled::Float64=0.1)::Float64\n\nhatH_ANSB = fracC_gammaln(2) - 1 + 2 ln(N) - psi_0(Delta)\n\nwhere C_gamma is Euler's Gamma Constant approx 057721, psi_0 is the digamma function and Delta the number of coincidences in the data.\n\nReturns the Asymptotic NSB estimator (equations 11 and 12)\n\nThis is designed for the extremely undersampled regime (K ~ N) and diverges with N when well-sampled. ANSB requires that NK  0, which we set to be NK  01 by default\n\n\n\n\n\n","category":"function"},{"location":"#Resampling","page":"Home","title":"Resampling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We can also resample data","category":"page"},{"location":"","page":"Home","title":"Home","text":"jackknife","category":"page"},{"location":"#Divergence","page":"Home","title":"Divergence","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"kl_divergence\njeffreys_divergence\njensen_shannon_divergence\njensen_shannon_distance","category":"page"},{"location":"#Conditional-Entropy-and-Conditional-Mutual-Information","page":"Home","title":"Conditional Entropy and Conditional Mutual Information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Conditional Entropy","category":"page"},{"location":"","page":"Home","title":"Home","text":"conditional_entropy","category":"page"},{"location":"#Other-Useful-Measures","page":"Home","title":"Other Useful Measures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"redundancy\nuncertainty_coefficient","category":"page"},{"location":"#DiscreteEntropy.redundancy","page":"Home","title":"DiscreteEntropy.redundancy","text":"redundancy(data::CountData, estimator::Type{T}) where {T<:AbstractEstimator}\n\nReturn the estimated information redundancy of data, with K the sampled support size.\n\nR = log(K) - hatH(data)\n\nredundancy(data::CountData, estimator::Type{T}, K::Int64) where {T<:AbstractEstimator}\n\nReturn the estimated information redundancy of data, with K set by the user.\n\nExternal Links\n\nRedundancy (wikipedia)\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.uncertainty_coefficient","page":"Home","title":"DiscreteEntropy.uncertainty_coefficient","text":"uncertainty_coefficient(counts::Matrix)\n\nC_{XY} = \\frac{I(X;Y)}{H(Y)}\n\nExternal Links\n\nTheil's U\n\n\n\n\n\n","category":"function"},{"location":"#Utilities","page":"Home","title":"Utilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"logx\nxlogx\nto_bits\nto_bans","category":"page"},{"location":"#DiscreteEntropy.logx","page":"Home","title":"DiscreteEntropy.logx","text":"logx(x)::Float64\n\nReturns natural logarithm of x, or 0.0 if x is zero\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.xlogx","page":"Home","title":"DiscreteEntropy.xlogx","text":"xlogx(x::Float64)\n\nReturns x * log(x) for x ≥ 0, or 0.0 if x is zero\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.to_bits","page":"Home","title":"DiscreteEntropy.to_bits","text":"to_bits(x::Float64)\n\nReturn frachlog(2) where h is in nats\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteEntropy.to_bans","page":"Home","title":"DiscreteEntropy.to_bans","text":"to_bans(x::Float64)\n\nReturn frachlog(10) where h is in nats\n\n\n\n\n\n","category":"function"}]
}
